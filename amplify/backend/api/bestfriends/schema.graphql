type Room @model {
  id: ID!
  name: String!
  creatorID: String!
  members: [String!]!
  messages: [Message!]
  timeUpdated: AWSTimestamp!
}

type SmileNote {
  id: ID!
  message: Message!
  favorite: Boolean!
}

type ShakingCool {
  id: ID!
  link: String!
  intendedid: String!
  intendedname: String!
}

type DeletionRequest @model {
  id: ID!
  userid: String!
  userEmail: String!
  reason: String!
  date: AWSDate!
}

type Message {
  id: ID!
  senderName: String!
  senderID: String!
  body: String!
  creationDate: AWSTimestamp!
  attachmentPath: String
  stickerNumber: Int
}

type ReportedMessage @model {
  reporterID: String!
  reportedMessage: Message!
  previousMessages: [Message!]
}

type User @model {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  birthday: AWSDate!
  pronouns: String!
  location: String!
  adPreference: [Int!]!
  deviceFCMToken: String!
  isOnline: Boolean!
  invitedRooms: [InvitedRoom!]
  secretPin: String!
  friends: [String!]
  rooms: [String!]
  hiddenRooms: [String!]
  smileNotes: [SmileNote!]
  shakingCool: [ShakingCool!]
  tokens: Int!
  background: Int!
  unlockedStickers: [Int!]
  notificationsBM: Boolean!
  notificationsLP: Boolean!
  chatFontSize: Int!
  pendingNotifications: [String!]
  needIntro: Boolean!
  backgroundImageLink: String
}

type InvitedRoom {
  roomID: String!
  timer: AWSTimestamp
}

type Advertisement @model {
  id: ID!
  category: String!
  videoName: String!
  adLink: String!
  duration: Float!
  hasAudio: Boolean!
  likes: Int!
  views: Int!
  shares: Int!
  clicks: Int!
}

type ManagementDocument @model {
  id: ID!
  documents: [String]
  emails: [String]
  usernames: [String]
  prices: [Int]
}
