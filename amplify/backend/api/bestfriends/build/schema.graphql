type Room {
  id: ID!
  name: String!
  creatorID: String!
  members: [String!]!
  messages: [Message!]
  timeUpdated: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type SmileNote {
  id: ID!
  message: Message!
  favorite: Boolean!
}

type ShakingCool {
  id: ID!
  link: String!
  intendedid: String!
  intendedname: String!
}

type DeletionRequest {
  id: ID!
  userid: String!
  userEmail: String!
  reason: String!
  date: AWSDate!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message {
  id: ID!
  senderName: String!
  senderID: String!
  body: String!
  creationDate: AWSTimestamp!
  attachmentPath: String
  stickerNumber: Int
}

type ReportedMessage {
  id: ID!
  reporterID: String!
  reportedMessage: Message!
  previousMessages: [Message!]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  birthday: AWSDate!
  pronouns: String!
  location: String!
  adPreference: [Int!]!
  deviceFCMToken: String!
  isOnline: Boolean!
  invitedRooms: [InvitedRoom!]
  secretPin: String!
  friends: [String!]
  rooms: [String!]
  hiddenRooms: [String!]
  smileNotes: [SmileNote!]
  shakingCool: [ShakingCool!]
  tokens: Int!
  background: Int!
  unlockedStickers: [Int!]
  notificationsBM: Boolean!
  notificationsLP: Boolean!
  chatFontSize: Int!
  pendingNotifications: [String!]
  needIntro: Boolean!
  backgroundImageLink: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type InvitedRoom {
  roomID: String!
  timer: AWSTimestamp
}

type Advertisement {
  id: ID!
  category: String!
  videoName: String!
  adLink: String!
  duration: Float!
  hasAudio: Boolean!
  likes: Int!
  views: Int!
  shares: Int!
  clicks: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ManagementDocument {
  id: ID!
  documents: [String]
  emails: [String]
  usernames: [String]
  prices: [Int]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input MessageInput {
  id: ID!
  senderName: String!
  senderID: String!
  body: String!
  creationDate: AWSTimestamp!
  attachmentPath: String
  stickerNumber: Int
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRoomConnection {
  items: [Room]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelRoomFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  creatorID: ModelStringInput
  members: ModelStringInput
  timeUpdated: ModelIntInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getRoom(id: ID!): Room
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection
  getDeletionRequest(id: ID!): DeletionRequest
  listDeletionRequests(filter: ModelDeletionRequestFilterInput, limit: Int, nextToken: String): ModelDeletionRequestConnection
  getReportedMessage(id: ID!): ReportedMessage
  listReportedMessages(filter: ModelReportedMessageFilterInput, limit: Int, nextToken: String): ModelReportedMessageConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getAdvertisement(id: ID!): Advertisement
  listAdvertisements(filter: ModelAdvertisementFilterInput, limit: Int, nextToken: String): ModelAdvertisementConnection
  getManagementDocument(id: ID!): ManagementDocument
  listManagementDocuments(filter: ModelManagementDocumentFilterInput, limit: Int, nextToken: String): ModelManagementDocumentConnection
}

input CreateRoomInput {
  id: ID
  name: String!
  creatorID: String!
  members: [String!]!
  messages: [MessageInput!]
  timeUpdated: AWSTimestamp!
}

input UpdateRoomInput {
  id: ID!
  name: String
  creatorID: String
  members: [String!]
  messages: [MessageInput!]
  timeUpdated: AWSTimestamp
}

input DeleteRoomInput {
  id: ID!
}

type Mutation {
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room
  createDeletionRequest(input: CreateDeletionRequestInput!, condition: ModelDeletionRequestConditionInput): DeletionRequest
  updateDeletionRequest(input: UpdateDeletionRequestInput!, condition: ModelDeletionRequestConditionInput): DeletionRequest
  deleteDeletionRequest(input: DeleteDeletionRequestInput!, condition: ModelDeletionRequestConditionInput): DeletionRequest
  createReportedMessage(input: CreateReportedMessageInput!, condition: ModelReportedMessageConditionInput): ReportedMessage
  updateReportedMessage(input: UpdateReportedMessageInput!, condition: ModelReportedMessageConditionInput): ReportedMessage
  deleteReportedMessage(input: DeleteReportedMessageInput!, condition: ModelReportedMessageConditionInput): ReportedMessage
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createAdvertisement(input: CreateAdvertisementInput!, condition: ModelAdvertisementConditionInput): Advertisement
  updateAdvertisement(input: UpdateAdvertisementInput!, condition: ModelAdvertisementConditionInput): Advertisement
  deleteAdvertisement(input: DeleteAdvertisementInput!, condition: ModelAdvertisementConditionInput): Advertisement
  createManagementDocument(input: CreateManagementDocumentInput!, condition: ModelManagementDocumentConditionInput): ManagementDocument
  updateManagementDocument(input: UpdateManagementDocumentInput!, condition: ModelManagementDocumentConditionInput): ManagementDocument
  deleteManagementDocument(input: DeleteManagementDocumentInput!, condition: ModelManagementDocumentConditionInput): ManagementDocument
}

input ModelRoomConditionInput {
  name: ModelStringInput
  creatorID: ModelStringInput
  members: ModelStringInput
  timeUpdated: ModelIntInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
}

type Subscription {
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onUpdateRoom: Room @aws_subscribe(mutations: ["updateRoom"])
  onDeleteRoom: Room @aws_subscribe(mutations: ["deleteRoom"])
  onCreateDeletionRequest: DeletionRequest @aws_subscribe(mutations: ["createDeletionRequest"])
  onUpdateDeletionRequest: DeletionRequest @aws_subscribe(mutations: ["updateDeletionRequest"])
  onDeleteDeletionRequest: DeletionRequest @aws_subscribe(mutations: ["deleteDeletionRequest"])
  onCreateReportedMessage: ReportedMessage @aws_subscribe(mutations: ["createReportedMessage"])
  onUpdateReportedMessage: ReportedMessage @aws_subscribe(mutations: ["updateReportedMessage"])
  onDeleteReportedMessage: ReportedMessage @aws_subscribe(mutations: ["deleteReportedMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateAdvertisement: Advertisement @aws_subscribe(mutations: ["createAdvertisement"])
  onUpdateAdvertisement: Advertisement @aws_subscribe(mutations: ["updateAdvertisement"])
  onDeleteAdvertisement: Advertisement @aws_subscribe(mutations: ["deleteAdvertisement"])
  onCreateManagementDocument: ManagementDocument @aws_subscribe(mutations: ["createManagementDocument"])
  onUpdateManagementDocument: ManagementDocument @aws_subscribe(mutations: ["updateManagementDocument"])
  onDeleteManagementDocument: ManagementDocument @aws_subscribe(mutations: ["deleteManagementDocument"])
}

type ModelDeletionRequestConnection {
  items: [DeletionRequest]
  nextToken: String
}

input ModelDeletionRequestFilterInput {
  id: ModelIDInput
  userid: ModelStringInput
  userEmail: ModelStringInput
  reason: ModelStringInput
  date: ModelStringInput
  and: [ModelDeletionRequestFilterInput]
  or: [ModelDeletionRequestFilterInput]
  not: ModelDeletionRequestFilterInput
}

input CreateDeletionRequestInput {
  id: ID
  userid: String!
  userEmail: String!
  reason: String!
  date: AWSDate!
}

input UpdateDeletionRequestInput {
  id: ID!
  userid: String
  userEmail: String
  reason: String
  date: AWSDate
}

input DeleteDeletionRequestInput {
  id: ID!
}

input ModelDeletionRequestConditionInput {
  userid: ModelStringInput
  userEmail: ModelStringInput
  reason: ModelStringInput
  date: ModelStringInput
  and: [ModelDeletionRequestConditionInput]
  or: [ModelDeletionRequestConditionInput]
  not: ModelDeletionRequestConditionInput
}

type ModelReportedMessageConnection {
  items: [ReportedMessage]
  nextToken: String
}

input ModelReportedMessageFilterInput {
  reporterID: ModelStringInput
  and: [ModelReportedMessageFilterInput]
  or: [ModelReportedMessageFilterInput]
  not: ModelReportedMessageFilterInput
}

input CreateReportedMessageInput {
  id: ID
  reporterID: String!
  reportedMessage: MessageInput!
  previousMessages: [MessageInput!]
}

input UpdateReportedMessageInput {
  reporterID: String
  reportedMessage: MessageInput
  previousMessages: [MessageInput!]
}

input DeleteReportedMessageInput {
  id: ID!
}

input ModelReportedMessageConditionInput {
  reporterID: ModelStringInput
  and: [ModelReportedMessageConditionInput]
  or: [ModelReportedMessageConditionInput]
  not: ModelReportedMessageConditionInput
}

input InvitedRoomInput {
  roomID: String!
  timer: AWSTimestamp
}

input SmileNoteInput {
  id: ID!
  message: MessageInput!
  favorite: Boolean!
}

input ShakingCoolInput {
  id: ID!
  link: String!
  intendedid: String!
  intendedname: String!
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  birthday: ModelStringInput
  pronouns: ModelStringInput
  location: ModelStringInput
  adPreference: ModelIntInput
  deviceFCMToken: ModelStringInput
  isOnline: ModelBooleanInput
  secretPin: ModelStringInput
  friends: ModelStringInput
  rooms: ModelStringInput
  hiddenRooms: ModelStringInput
  tokens: ModelIntInput
  background: ModelIntInput
  unlockedStickers: ModelIntInput
  notificationsBM: ModelBooleanInput
  notificationsLP: ModelBooleanInput
  chatFontSize: ModelIntInput
  pendingNotifications: ModelStringInput
  needIntro: ModelBooleanInput
  backgroundImageLink: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  birthday: AWSDate!
  pronouns: String!
  location: String!
  adPreference: [Int!]!
  deviceFCMToken: String!
  isOnline: Boolean!
  invitedRooms: [InvitedRoomInput!]
  secretPin: String!
  friends: [String!]
  rooms: [String!]
  hiddenRooms: [String!]
  smileNotes: [SmileNoteInput!]
  shakingCool: [ShakingCoolInput!]
  tokens: Int!
  background: Int!
  unlockedStickers: [Int!]
  notificationsBM: Boolean!
  notificationsLP: Boolean!
  chatFontSize: Int!
  pendingNotifications: [String!]
  needIntro: Boolean!
  backgroundImageLink: String
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  birthday: AWSDate
  pronouns: String
  location: String
  adPreference: [Int!]
  deviceFCMToken: String
  isOnline: Boolean
  invitedRooms: [InvitedRoomInput!]
  secretPin: String
  friends: [String!]
  rooms: [String!]
  hiddenRooms: [String!]
  smileNotes: [SmileNoteInput!]
  shakingCool: [ShakingCoolInput!]
  tokens: Int
  background: Int
  unlockedStickers: [Int!]
  notificationsBM: Boolean
  notificationsLP: Boolean
  chatFontSize: Int
  pendingNotifications: [String!]
  needIntro: Boolean
  backgroundImageLink: String
}

input DeleteUserInput {
  id: ID!
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  birthday: ModelStringInput
  pronouns: ModelStringInput
  location: ModelStringInput
  adPreference: ModelIntInput
  deviceFCMToken: ModelStringInput
  isOnline: ModelBooleanInput
  secretPin: ModelStringInput
  friends: ModelStringInput
  rooms: ModelStringInput
  hiddenRooms: ModelStringInput
  tokens: ModelIntInput
  background: ModelIntInput
  unlockedStickers: ModelIntInput
  notificationsBM: ModelBooleanInput
  notificationsLP: ModelBooleanInput
  chatFontSize: ModelIntInput
  pendingNotifications: ModelStringInput
  needIntro: ModelBooleanInput
  backgroundImageLink: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelAdvertisementConnection {
  items: [Advertisement]
  nextToken: String
}

input ModelAdvertisementFilterInput {
  id: ModelIDInput
  category: ModelStringInput
  videoName: ModelStringInput
  adLink: ModelStringInput
  duration: ModelFloatInput
  hasAudio: ModelBooleanInput
  likes: ModelIntInput
  views: ModelIntInput
  shares: ModelIntInput
  clicks: ModelIntInput
  and: [ModelAdvertisementFilterInput]
  or: [ModelAdvertisementFilterInput]
  not: ModelAdvertisementFilterInput
}

input CreateAdvertisementInput {
  id: ID
  category: String!
  videoName: String!
  adLink: String!
  duration: Float!
  hasAudio: Boolean!
  likes: Int!
  views: Int!
  shares: Int!
  clicks: Int!
}

input UpdateAdvertisementInput {
  id: ID!
  category: String
  videoName: String
  adLink: String
  duration: Float
  hasAudio: Boolean
  likes: Int
  views: Int
  shares: Int
  clicks: Int
}

input DeleteAdvertisementInput {
  id: ID!
}

input ModelAdvertisementConditionInput {
  category: ModelStringInput
  videoName: ModelStringInput
  adLink: ModelStringInput
  duration: ModelFloatInput
  hasAudio: ModelBooleanInput
  likes: ModelIntInput
  views: ModelIntInput
  shares: ModelIntInput
  clicks: ModelIntInput
  and: [ModelAdvertisementConditionInput]
  or: [ModelAdvertisementConditionInput]
  not: ModelAdvertisementConditionInput
}

type ModelManagementDocumentConnection {
  items: [ManagementDocument]
  nextToken: String
}

input ModelManagementDocumentFilterInput {
  id: ModelIDInput
  documents: ModelStringInput
  emails: ModelStringInput
  usernames: ModelStringInput
  prices: ModelIntInput
  and: [ModelManagementDocumentFilterInput]
  or: [ModelManagementDocumentFilterInput]
  not: ModelManagementDocumentFilterInput
}

input CreateManagementDocumentInput {
  id: ID
  documents: [String]
  emails: [String]
  usernames: [String]
  prices: [Int]
}

input UpdateManagementDocumentInput {
  id: ID!
  documents: [String]
  emails: [String]
  usernames: [String]
  prices: [Int]
}

input DeleteManagementDocumentInput {
  id: ID!
}

input ModelManagementDocumentConditionInput {
  documents: ModelStringInput
  emails: ModelStringInput
  usernames: ModelStringInput
  prices: ModelIntInput
  and: [ModelManagementDocumentConditionInput]
  or: [ModelManagementDocumentConditionInput]
  not: ModelManagementDocumentConditionInput
}
